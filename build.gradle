apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'com.tsctech.springdata.demo'
version = '1.0.BUILD-SNAPSHOT'

description = 'Spring Data Demo'

sourceCompatibility = 6
targetCompatibility = 6

// Versions are in gradle.properties

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://source.mysema.com/maven2/releases"
    }

}
sourceSets {
    main {
        // Fixes problem with JPA EntityManager factory requiring classes and persistence.xml in same path
        output.resourcesDir = output.classesDir
    }
}

dependencies {
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: springDataJpaVersion
    compile group: 'org.springframework.data', name: 'spring-data-mongodb', version: springDataMongoDbVersion
    compile group: 'com.mysema.querydsl', name: 'querydsl-mongodb', version: queryDslVersion
    compile group: 'com.mysema.querydsl', name: 'querydsl-jpa', version: queryDslVersion
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-aop', version: springVersion
    compile group: 'org.springframework', name: 'spring-aspects', version: springVersion
    compile group: 'org.springframework', name: 'spring-jdbc', version: springVersion
    compile group: 'org.springframework', name: 'spring-orm', version: springVersion
    compile(group: 'org.springframework', name: 'spring-core', version: springVersion) {
        exclude(module: 'commons-logging')
    }

    compile 'org.mongodb:mongo-java-driver:2.11.4'

    compile group: 'org.hibernate', name: 'hibernate-core', version: hibernateVersion
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: hibernateVersion
    compile(group: 'org.hibernate', name: 'hibernate-validator', version: hibernateValidatorVersion) {
        exclude(module: 'jaxb-api')
        exclude(module: 'jaxb-impl')
    }

    compile group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'

    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4JVersion
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4JVersion
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4JVersion
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4JVersion
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    compile group: 'org.aspectj', name: 'aspectjrt', version: aspectJVersion
    compile group: 'org.aspectj', name: 'aspectjweaver', version: aspectJVersion

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
    compile group: 'javax.transaction', name: 'jta', version: '1.1'
    compile group: 'commons-pool', name: 'commons-pool', version: '1.5.6'
    compile(group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4') {
        exclude(module: 'commons-logging')
        exclude(module: 'xml-apis')
    }

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'com.h2database', name: 'h2', version: '1.3.175'
}


configurations {
    queryDslTool
}

dependencies {
    queryDslTool group: 'com.mysema.querydsl', name: 'querydsl-apt', version: queryDslVersion
}

task generateSources {
    def queryDslDir = new File(buildDir, 'generated-sources/java')
    sourceSets.main.java.srcDirs += queryDslDir
    inputs.files(sourceSets.main.java.srcDirs)
    outputs.dir(queryDslDir)
    doLast {
        if (!queryDslDir.exists()) {
            queryDslDir.mkdirs()
        }
        def classPathStr = (configurations.queryDslTool + sourceSets.main.runtimeClasspath).asPath
        ant {
            javac(classpath: classPathStr, includes: 'org/springframework/data/demo/data/**', includeantruntime: false) {
                sourceSets.main.java.srcDirs.each {
                    if (it != queryDslDir) {
                        src(path: it.path)
                    }
                }
                compilerarg value: '-proc:only'
                compilerarg value: '-processor'
                compilerarg value: 'com.mysema.query.apt.QuerydslAnnotationProcessor'
                compilerarg value: '-s'
                compilerarg value: queryDslDir.path
            }
            echo(message: 'Generated QueryDSL Helpers')
        }
    }
}

compileJava.dependsOn generateSources

task cleanTestJpa(type: Delete) {
    delete 'test-sd.h2.db'
}

cleanTest.dependsOn cleanTestJpa

configurations {
    springAgent
}

dependencies {
    springAgent group: 'org.springframework', name: 'spring-instrument', version: springVersion
}

test {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'jpa-hibernate'
    testLogging.showStandardStreams = true
}

task testMongo(type: Test, dependsOn: [classes, testClasses]) {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'mongo'
    testLogging.showStandardStreams = true
}


eclipse {
    classpath {
        downloadSources = true
    }
}
idea {
    module {
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
