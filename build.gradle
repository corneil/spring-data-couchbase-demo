buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.7' }
}
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'com.tsctech.springdata.demo'
version = '1.0.BUILD-SNAPSHOT'

description = 'Spring Data Demo'

sourceCompatibility = 7
targetCompatibility = 7

// Versions are in gradle.properties

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'http://repo.spring.io/repo'
    }
	/*
    maven {
        url 'http://repo.spring.io/milestone'
    }
    maven {
        url 'http://repo.spring.io/snapshot'
    }
    */
}
sourceSets {
    main {
        // Fixes problem with JPA EntityManager factory requiring classes and persistence.xml in same path
        output.resourcesDir = output.classesDir
    }
}

configurations {
    queryDslTool
    springAgent
}

dependencies {
	
	compile 'org.springframework.data:spring-data-commons:' + springDataCommonsVersion
    compile 'org.springframework.data:spring-data-jpa:' + springDataJpaVersion
    compile 'org.springframework.data:spring-data-mongodb:' + springDataMongoDbVersion
    compile 'org.springframework.data:spring-data-couchbase:' + springDataCouchbaseVersion

    compile 'com.mysema.querydsl:querydsl-mongodb:' + queryDslVersion
    compile 'com.mysema.querydsl:querydsl-jpa:' + queryDslVersion
	
    compile 'org.springframework:spring-context:' + springVersion
    compile 'org.springframework:spring-aop:' + springVersion
    compile 'org.springframework:spring-aspects:' + springVersion
    compile 'org.springframework:spring-jdbc:' + springVersion
    compile 'org.springframework:spring-orm:' + springVersion
    compile(group: 'org.springframework', name: 'spring-core', version: springVersion) {
        exclude(module: 'commons-logging')
    }

    compile 'org.mongodb:mongo-java-driver:2.12.4'

    compile 'org.hibernate:hibernate-core:' + hibernateVersion
    compile 'org.hibernate:hibernate-entitymanager:' + hibernateVersion
    compile(group: 'org.hibernate', name: 'hibernate-validator', version: hibernateValidatorVersion) {
        exclude(module: 'jaxb-api')
        exclude(module: 'jaxb-impl')
    }

    compile 'javax.validation:validation-api:1.1.0.Final'

    compile 'org.slf4j:slf4j-api:' + slf4JVersion
    compile 'org.slf4j:jcl-over-slf4j:' + slf4JVersion
    compile 'org.slf4j:jul-to-slf4j:' + slf4JVersion
    compile 'org.slf4j:slf4j-log4j12:' + slf4JVersion
    compile 'log4j:log4j:1.2.17'

    compile 'org.aspectj:aspectjrt:' + aspectJVersion
    compile 'org.aspectj:aspectjweaver:' + aspectJVersion

    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'javax.transaction:jta:1.1'
    compile 'commons-pool:commons-pool:1.6'
    compile(group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4') {
        exclude(module: 'commons-logging')
        exclude(module: 'xml-apis')
    }

    testCompile 'junit:junit:4.11'
    testCompile 'org.springframework:spring-test:' + springVersion

    testCompile 'com.h2database:h2:1.3.175'
    testCompile 'mysql:mysql-connector-java:5.1.34'

    compile 'com.github.fakemongo:fongo:1.5.10'

    testCompile 'javax.el:el-api:2.2'

    springAgent 'org.springframework:spring-instrument:' + springVersion

    queryDslTool 'com.mysema.querydsl:querydsl-apt:' + queryDslVersion
}

task generateSources {
    def queryDslDir = new File(buildDir, 'generated-sources/java')
    def queryDslGenerated = new File(buildDir, 'query-dsl-generated.txt')
    sourceSets.main.java.srcDirs += queryDslDir
    inputs.files(sourceSets.main.java.srcDirs)
    outputs.file(queryDslGenerated)
    doLast {
        if (!queryDslDir.exists()) {
            queryDslDir.mkdirs()
        }
        def classPathStr = (configurations.queryDslTool + sourceSets.main.runtimeClasspath).asPath
        ant {
            javac(classpath: classPathStr, includes: 'org/springframework/data/demo/data/**', includeantruntime: false) {
                sourceSets.main.java.srcDirs.each {
                    if (it != queryDslDir) {
                        src(path: it.path)
                    }
                }
                compilerarg value: '-proc:only'
                compilerarg value: '-processor'
                compilerarg value: 'com.mysema.query.apt.QuerydslAnnotationProcessor'
                compilerarg value: '-s'
                compilerarg value: queryDslDir.path
            }
            touch(file: queryDslGenerated)
            echo(message: 'Generated QueryDSL Helpers')
        }
    }
}

compileJava.dependsOn generateSources

task cleanTestJpa(type: Delete) {
    delete 'test-sd.h2.db'
    delete 'test-sd.trace.db'
}

cleanTest.dependsOn cleanTestJpa


test {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'jpa-hibernate'
    testLogging.showStandardStreams = true
}

task testMongo(type: Test, dependsOn: [classes, testClasses]) {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'mongo'
    testLogging.showStandardStreams = true
}


task testCouchbase(type: Test, dependsOn: [classes, testClasses]) {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'couchbase'
    testLogging.showStandardStreams = true
}

check.dependsOn testMongo

eclipse {
    classpath {
        downloadSources = true
    }
}
idea {
    module {
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
