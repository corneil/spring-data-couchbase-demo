buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion
        // classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.4.0'
    }
}

apply plugin: 'spring-boot'

dependencies {
    versionManagement = 'io.spring.platform:platform-versions:' + springIOVersion + '@properties'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
// apply plugin: 'mongo'

group = 'com.tsctech.springdata.demo'
version = '1.0.BUILD-SNAPSHOT'

description = 'Spring Data Demo'

sourceCompatibility = 7
targetCompatibility = 7

// Versions are in gradle.properties

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'http://repo.spring.io/repo'
    }
    /*
    maven {
        url 'http://source.mysema.com/maven2/releases'
    }
    */
    maven {
        url 'http://repo.spring.io/milestone'
    }
    maven {
        url 'http://repo.spring.io/snapshot'
    }
}
sourceSets {
    main {
        // Fixes problem with JPA EntityManager factory requiring classes and persistence.xml in same path
        output.resourcesDir = output.classesDir
    }
}

dependencies {
    // compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.data:spring-data-jpa'
    compile 'org.springframework.data:spring-data-mongodb'
    compile 'org.springframework.data:spring-data-couchbase:' + springDataCouchbaseVersion

    compile 'com.mysema.querydsl:querydsl-mongodb:' + queryDslVersion
    compile 'com.mysema.querydsl:querydsl-jpa:' + queryDslVersion
    compile 'org.springframework:spring-context'
    compile 'org.springframework:spring-aop'
    compile 'org.springframework:spring-aspects'
    compile 'org.springframework:spring-jdbc'
    compile 'org.springframework:spring-orm'
    compile 'org.springframework:spring-core'

    compile 'org.mongodb:mongo-java-driver:2.11.4'

    compile 'org.hibernate:hibernate-core:' + hibernateVersion
    compile 'org.hibernate:hibernate-entitymanager:' + hibernateVersion
    compile 'org.hibernate:hibernate-validator:' + hibernateValidatorVersion

    compile 'javax.validation:validation-api:1.1.0.Final'

    compile 'org.slf4j:slf4j-api'
    compile 'org.slf4j:jcl-over-slf4j'
    compile 'org.slf4j:jul-to-slf4j'
    compile 'org.slf4j:slf4j-log4j12'
    compile 'log4j:log4j'

    compile 'org.aspectj:aspectjrt'
    compile 'org.aspectj:aspectjweaver'

    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-collections:commons-collections'
    compile 'javax.transaction:jta:1.1'
    compile 'commons-pool:commons-pool'
    compile 'commons-dbcp:commons-dbcp'

    testCompile 'junit:junit'
    testCompile 'org.springframework:spring-test'

    testCompile 'com.h2database:h2:1.3.175'
    testCompile 'mysql:mysql-connector-java:5.1.30'
    // testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.46.4'
    compile 'com.github.fakemongo:fongo:1.5.7'

    testCompile 'javax.el:el-api:2.2'

}


configurations {
    queryDslTool
}

dependencies {
    queryDslTool 'com.mysema.querydsl:querydsl-apt:' + queryDslVersion
}

task generateSources {
    def queryDslDir = new File(buildDir, 'generated-sources/java')
    sourceSets.main.java.srcDirs += queryDslDir
    inputs.files(sourceSets.main.java.srcDirs)
    outputs.dir(queryDslDir)
    doLast {
        if (!queryDslDir.exists()) {
            queryDslDir.mkdirs()
        }
        def classPathStr = (configurations.queryDslTool + sourceSets.main.runtimeClasspath).asPath
        ant {
            javac(classpath: classPathStr, includes: 'org/springframework/data/demo/data/**', includeantruntime: false) {
                sourceSets.main.java.srcDirs.each {
                    if (it != queryDslDir) {
                        src(path: it.path)
                    }
                }
                compilerarg value: '-proc:only'
                compilerarg value: '-processor'
                compilerarg value: 'com.mysema.query.apt.QuerydslAnnotationProcessor'
                compilerarg value: '-s'
                compilerarg value: queryDslDir.path
            }
            echo(message: 'Generated QueryDSL Helpers')
        }
    }
}

compileJava.dependsOn generateSources

task cleanTestJpa(type: Delete) {
    delete 'test-sd.h2.db'
    delete 'test-sd.trace.db'
}

cleanTest.dependsOn cleanTestJpa

configurations {
    springAgent
}

dependencies {
    springAgent 'org.springframework:spring-instrument'
}
/*
mongo {
    version 'PRODUCTION'
    storageLocation project.buildDir.path + '/mongo'
    logging 'console'
}
*/
test {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'jpa-hibernate'
    testLogging.showStandardStreams = true
}

task testMongo(type: Test, dependsOn: [classes, testClasses]) {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'mongo'
    testLogging.showStandardStreams = true
}


task testCouchbase(type: Test, dependsOn: [classes, testClasses]) {
    jvmArgs = ['-javaagent:' + configurations.springAgent.singleFile.toString()]
    systemProperty 'spring.profiles.active', 'couchbase'
    testLogging.showStandardStreams = true
}

eclipse {
    classpath {
        downloadSources = true
    }
}
idea {
    module {
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
